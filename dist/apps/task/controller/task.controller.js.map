{"version":3,"sources":["../../../../src/apps/task/controller/task.controller.ts"],"sourcesContent":["import { CreateTaskDto, TaskDto } from 'src/dto/task/task.dto';\nimport { TaskService } from '../service/task.service';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiNoContentResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\n\n@Controller('task')\n@ApiTags('Task')\nexport class TaskController {\n  constructor(private readonly task: TaskService) {}\n\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiOkResponse({ type: TaskDto, isArray: true })\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  list() {\n    return this.task.list();\n  }\n\n  @ApiBearerAuth()\n  @ApiBody({ type: CreateTaskDto })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiOkResponse({ type: TaskDto })\n  @ApiBadRequestResponse({ description: 'Task already exists' })\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  create(@Body() data: CreateTaskDto) {\n    return this.task.create(data);\n  }\n  @ApiBearerAuth()\n  @ApiNotFoundResponse({ description: 'Task not found' })\n  @ApiOkResponse({ type: TaskDto })\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  getTask(@Param('id', ParseIntPipe) id: number) {\n    return this.task.findTask(id);\n  }\n\n  @ApiBearerAuth()\n  @ApiNotFoundResponse({ description: 'Task not found' })\n  @ApiOkResponse({ type: TaskDto })\n  @ApiBody({ type: TaskDto })\n  @ApiBadRequestResponse({ description: 'Task already exists' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @Put(':id')\n  @HttpCode(HttpStatus.OK)\n  update(@Param('id', ParseIntPipe) id: number, @Body() data: TaskDto) {\n    return this.task.update(id, data);\n  }\n\n  @ApiBearerAuth()\n  @ApiNotFoundResponse({ description: 'Task not found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiNoContentResponse({ description: 'Task deleted' })\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(@Param('id', ParseIntPipe) id: number) {\n    return this.task.delete(id);\n  }\n\n  @ApiBearerAuth()\n  @ApiNotFoundResponse({ description: 'Task not found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiOkResponse({ type: TaskDto })\n  @Put(':id/completed')\n  @HttpCode(HttpStatus.OK)\n  completed(@Param('id') id: number) {\n    return this.task.completed(id);\n  }\n}\n"],"names":["TaskController","list","task","create","data","getTask","id","findTask","update","delete","completed","constructor","description","type","TaskDto","isArray","OK","CreateTaskDto","CREATED","NO_CONTENT"],"mappings":";;;;+BA2BaA;;;eAAAA;;;yBA3B0B;6BACX;wBAYrB;yBAUA;;;;;;;;;;;;;;;AAIA,IAAA,AAAMA,iBAAN,MAAMA;IAQXC,OAAO;QACL,OAAO,IAAI,CAACC,IAAI,CAACD,IAAI;IACvB;IASAE,OAAO,AAAQC,IAAmB,EAAE;QAClC,OAAO,IAAI,CAACF,IAAI,CAACC,MAAM,CAACC;IAC1B;IAMAC,QAAQ,AAA2BC,EAAU,EAAE;QAC7C,OAAO,IAAI,CAACJ,IAAI,CAACK,QAAQ,CAACD;IAC5B;IAUAE,OAAO,AAA2BF,EAAU,EAAE,AAAQF,IAAa,EAAE;QACnE,OAAO,IAAI,CAACF,IAAI,CAACM,MAAM,CAACF,IAAIF;IAC9B;IAQAK,OAAO,AAA2BH,EAAU,EAAE;QAC5C,OAAO,IAAI,CAACJ,IAAI,CAACO,MAAM,CAACH;IAC1B;IAQAI,UAAU,AAAaJ,EAAU,EAAE;QACjC,OAAO,IAAI,CAACJ,IAAI,CAACQ,SAAS,CAACJ;IAC7B;IA5DAK,YAAY,AAAiBT,IAAiB,CAAE;aAAnBA,OAAAA;IAAoB;AA6DnD;;;;QA1D6BU,aAAa;;;QACvBC,MAAMC,gBAAO;QAAEC,SAAS;;;6CAEpBC;;;;;;;;QAMVH,MAAMI,sBAAa;;;QACHL,aAAa;;;QACvBC,MAAMC,gBAAO;;;QACLF,aAAa;;;6CAEjBM;;;;;;;;;;;QAKEN,aAAa;;;QACnBC,MAAMC,gBAAO;;;6CAETE;;;;;;;;;;;QAMEJ,aAAa;;;QACnBC,MAAMC,gBAAO;;;QACnBD,MAAMC,gBAAO;;;QACCF,aAAa;;;QACXA,aAAa;;;6CAEnBI;;;;;;;;;;;;;QAMEJ,aAAa;;;QACTA,aAAa;;;QAChBA,aAAa;;;6CAEhBO;;;;;;;;;;;QAMEP,aAAa;;;QACTA,aAAa;;;QACvBC,MAAMC,gBAAO;;;6CAETE"}