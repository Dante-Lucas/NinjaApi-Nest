{"version":3,"sources":["../../../../src/apps/task/service/task.service.ts"],"sourcesContent":["import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { CreateTaskDto, TaskDto } from 'src/dto/task/task.dto';\nimport { PrismaService } from 'src/infra/prisma/prisma.service';\n\n@Injectable()\nexport class TaskService {\n  constructor(private readonly prisma: PrismaService) {}\n  async list() {\n    return await this.prisma.task.findMany();\n  }\n\n  async create(data: CreateTaskDto) {\n    const consult = {\n      title: data.title,\n    };\n    const task = await this.prisma.task.findFirst({ where: consult });\n\n    if (task) {\n      throw new HttpException('Task already exists', HttpStatus.BAD_REQUEST);\n    }\n    return await this.prisma.task.create({\n      data: { title: data.title, content: data.content },\n    });\n  }\n\n  async findTask(id: number) {\n    const task = await this.prisma.task.findUnique({\n      where: {\n        id: id,\n      },\n    });\n    if (!task) {\n      throw new HttpException('Task not found', HttpStatus.NOT_FOUND);\n    }\n    return task;\n  }\n\n  async update(id: number, data: TaskDto) {\n    await this.findTask(id);\n\n    return await this.prisma.task.update({\n      where: {\n        id: Number(id),\n      },\n      data: {\n        title: data.title,\n        content: data.content,\n        status: data.status,\n      },\n    });\n  }\n\n  async delete(id: number) {\n    await this.findTask(id);\n    return await this.prisma.task.delete({\n      where: {\n        id: Number(id),\n      },\n    });\n  }\n\n  async completed(id: number) {\n    const task = await this.findTask(id);\n    const completed: boolean = !task.status;\n    return await this.prisma.task.update({\n      where: {\n        id: Number(id),\n      },\n      data: {\n        status: completed,\n      },\n    });\n  }\n}\n"],"names":["TaskService","list","prisma","task","findMany","create","data","consult","title","findFirst","where","HttpException","HttpStatus","BAD_REQUEST","content","findTask","id","findUnique","NOT_FOUND","update","Number","status","delete","completed","constructor"],"mappings":";;;;+BAKaA;;;eAAAA;;;wBALyC;+BAExB;;;;;;;;;;AAGvB,IAAA,AAAMA,cAAN,MAAMA;IAEX,MAAMC,OAAO;QACX,OAAO,MAAM,IAAI,CAACC,MAAM,CAACC,IAAI,CAACC,QAAQ;IACxC;IAEA,MAAMC,OAAOC,IAAmB,EAAE;QAChC,MAAMC,UAAU;YACdC,OAAOF,KAAKE,KAAK;QACnB;QACA,MAAML,OAAO,MAAM,IAAI,CAACD,MAAM,CAACC,IAAI,CAACM,SAAS,CAAC;YAAEC,OAAOH;QAAQ;QAE/D,IAAIJ,MAAM;YACR,MAAM,IAAIQ,qBAAa,CAAC,uBAAuBC,kBAAU,CAACC,WAAW;QACvE;QACA,OAAO,MAAM,IAAI,CAACX,MAAM,CAACC,IAAI,CAACE,MAAM,CAAC;YACnCC,MAAM;gBAAEE,OAAOF,KAAKE,KAAK;gBAAEM,SAASR,KAAKQ,OAAO;YAAC;QACnD;IACF;IAEA,MAAMC,SAASC,EAAU,EAAE;QACzB,MAAMb,OAAO,MAAM,IAAI,CAACD,MAAM,CAACC,IAAI,CAACc,UAAU,CAAC;YAC7CP,OAAO;gBACLM,IAAIA;YACN;QACF;QACA,IAAI,CAACb,MAAM;YACT,MAAM,IAAIQ,qBAAa,CAAC,kBAAkBC,kBAAU,CAACM,SAAS;QAChE;QACA,OAAOf;IACT;IAEA,MAAMgB,OAAOH,EAAU,EAAEV,IAAa,EAAE;QACtC,MAAM,IAAI,CAACS,QAAQ,CAACC;QAEpB,OAAO,MAAM,IAAI,CAACd,MAAM,CAACC,IAAI,CAACgB,MAAM,CAAC;YACnCT,OAAO;gBACLM,IAAII,OAAOJ;YACb;YACAV,MAAM;gBACJE,OAAOF,KAAKE,KAAK;gBACjBM,SAASR,KAAKQ,OAAO;gBACrBO,QAAQf,KAAKe,MAAM;YACrB;QACF;IACF;IAEA,MAAMC,OAAON,EAAU,EAAE;QACvB,MAAM,IAAI,CAACD,QAAQ,CAACC;QACpB,OAAO,MAAM,IAAI,CAACd,MAAM,CAACC,IAAI,CAACmB,MAAM,CAAC;YACnCZ,OAAO;gBACLM,IAAII,OAAOJ;YACb;QACF;IACF;IAEA,MAAMO,UAAUP,EAAU,EAAE;QAC1B,MAAMb,OAAO,MAAM,IAAI,CAACY,QAAQ,CAACC;QACjC,MAAMO,YAAqB,CAACpB,KAAKkB,MAAM;QACvC,OAAO,MAAM,IAAI,CAACnB,MAAM,CAACC,IAAI,CAACgB,MAAM,CAAC;YACnCT,OAAO;gBACLM,IAAII,OAAOJ;YACb;YACAV,MAAM;gBACJe,QAAQE;YACV;QACF;IACF;IAlEAC,YAAY,AAAiBtB,MAAqB,CAAE;aAAvBA,SAAAA;IAAwB;AAmEvD"}